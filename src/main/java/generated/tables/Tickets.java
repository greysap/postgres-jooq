/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import generated.Indexes;
import generated.Public;
import generated.tables.records.TicketsRecord;


/**
 * Tickets
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = 1554352548;

    /**
     * The reference instance of <code>public.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>public.tickets.ticket_no</code>. Ticket number
     */
    public final TableField<TicketsRecord, String> TICKET_NO = createField(DSL.name("ticket_no"), org.jooq.impl.SQLDataType.CHAR(13).nullable(false), this, "Ticket number");

    /**
     * The column <code>public.tickets.book_ref</code>. Booking number
     */
    public final TableField<TicketsRecord, String> BOOK_REF = createField(DSL.name("book_ref"), org.jooq.impl.SQLDataType.CHAR(6).nullable(false), this, "Booking number");

    /**
     * The column <code>public.tickets.passenger_id</code>. Passenger ID
     */
    public final TableField<TicketsRecord, String> PASSENGER_ID = createField(DSL.name("passenger_id"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "Passenger ID");

    /**
     * The column <code>public.tickets.passenger_name</code>. Passenger name
     */
    public final TableField<TicketsRecord, String> PASSENGER_NAME = createField(DSL.name("passenger_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Passenger name");

    /**
     * The column <code>public.tickets.contact_data</code>.
     */
    public final TableField<TicketsRecord, JSONB> CONTACT_DATA = createField(DSL.name("contact_data"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * Create a <code>public.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>public.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Tickets"));
    }

    public <O extends Record> Tickets(Table<O> child, ForeignKey<O, TicketsRecord> key) {
        super(child, key, TICKETS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTACTIDX);
    }

    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
